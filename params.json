{"name":"Needle","body":"Needle\r\n======\r\n\r\nAsync HTTP client for Node.js. Supports SSL, basic authentication, proxied requests, multipart\r\nform POSTs, gzip/deflate compression and redirect following. \r\n\r\nUsage\r\n-----\r\n\r\n``` js\r\nvar client = require('needle');\r\n\r\nclient.get(url, [options], callback);\r\nclient.head(url, [options], callback);\r\nclient.post(url, data, [options], callback);\r\nclient.put(url, data, [options], callback);\r\nclient.delete(url, [options], callback);\r\n```\r\n\r\nCallback receives three arguments: `(error, response, body)`\r\n\r\nOptions\r\n------\r\n\r\n - `follow`: Whether to follow redirects or not. Can be a number (of max redirects), `true` (which translates to 10) or `false` (default).\r\n - `timeout`: Returns error if response takes more than X. Defaults to `10000` (10 secs). Set to 0 for no timeout.\r\n - `compressed`: Whether to ask for a deflated or gzipped response or not. Defaults to `false`.\r\n - `parse`: Whether to parse XML or JSON response bodies automagically. Defaults to `true`.\r\n - `multipart`: Enables multipart/form-data encoding. Defaults to `false`.\r\n - `username`: For HTTP basic auth.\r\n - `password`: For HTTP basic auth. Requires username to be passed, obviously.\r\n - `agent`: Uses an http.Agent of your choice, instead of the global (default) one.\r\n - `proxy`: Forwards request through HTTP proxy. Eg. `proxy: 'http://proxy.server.com:3128'`\r\n\r\nExamples\r\n--------\r\n\r\n### Simple GET.\r\n\r\n``` js\r\nclient.get('http://www.google.com', function(err, resp, body){\r\n\r\n  console.log(\"Got status code: \" + resp.statusCode);\r\n\r\n});\r\n```\r\nYou can also skip the 'http://' part if you want, by the way.\r\n\r\n### GET with redirect.\r\n\r\n``` js\r\nclient.get('http://github.com', {follow: true}, function(err, resp, body){\r\n\r\n  // will follow redirect to 'https://github.com' as requested\r\n\r\n});\r\n```\r\n\r\n### HTTPS + querystring\r\n\r\n``` js\r\nclient.get('https://www.google.com/search?q=syd+barrett', function(err, resp, body){\r\n\r\n  // boom! works.\r\n\r\n});\r\n```\r\n\r\n### GET with options\r\n\r\n``` js\r\nvar options = {\r\n  username: 'you',\r\n  password: 'secret',\r\n  compressed: true,\r\n  timeout: false,\r\n  headers: {\r\n    'X-Secret-Header': \"Even more secret text\"\r\n  }\r\n}\r\n\r\nclient.get('http://api.server.com', options, function(err, resp, body){\r\n\r\n  // used HTTP auth\r\n\r\n});\r\n```\r\n\r\n### GET through proxy\r\n\r\n``` js\r\nclient.get('http://search.npmjs.org', { proxy: 'http://localhost:1234' }, function(err, resp, body){\r\n\r\n  // request passed through proxy\r\n\r\n});\r\n```\r\n\r\n### POST/PUT\r\n\r\n``` js\r\nclient.post('https://my.app.com/endpoint', 'foo=bar', function(err, resp, body){\r\n\r\n  // you can pass params as a string or as an object\r\n\r\n});\r\n```\r\n\r\n### POST/PUT 2\r\n\r\n``` js\r\nvar data = {\r\n  nested: {\r\n    params: {\r\n      are: {\r\n        also: 'supported'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclient.put('https://api.app.com/v2', data, function(err, resp, body){\r\n\r\n  // if you don't pass any data, needle will throw an exception.\r\n\r\n});\r\n```\r\n\r\n### Multipart POST: passing file path\r\n\r\n``` js\r\nvar data = {\r\n  foo: bar,\r\n  image: { file: '/home/tomas/linux.png', content_type: 'image/png' }\r\n}\r\n\r\nvar options = {\r\n  multipart: true,\r\n  timeout: 5000\r\n}\r\n\r\nclient.post('http://my.other.app.com', data, options, function(err, resp, body){\r\n\r\n  // in this case, if the request takes more than 5 seconds\r\n  // the callback will return a [Socket closed] error\r\n\r\n});\r\n```\r\n\r\n### Multipart POST 2: passing data buffer\r\n\r\n``` js\r\nvar buffer = fs.readFileSync('/path/to/package.zip');\r\nvar data = {\r\n  zip_file: { buffer: buffer, filename: 'mypackage.zip', content_type: 'application/octet-stream' },\r\n}\r\n\r\nclient.post('http://somewhere.com/over/the/rainbow', data, {multipart: true}, function(err, resp, body){\r\n\r\n  // if you see, when using buffers we need to pass the filename for the multipart body.\r\n  // you can also pass a filename when using the file path method, in case you want to override\r\n  // the default filename to be received on the other end.\r\n\r\n});\r\n```\r\n\r\nCredits\r\n-------\r\n\r\nWritten by Tom√°s Pollak, with the help of contributors.\r\n\r\nCopyright\r\n-----\r\n\r\n(c) 2012 Fork Ltd. Licensed under the MIT license.","tagline":"Tiny yet featureful HTTP client for Node.js. With deflate & multipart support.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}